# File location and type
file_location = "/dbfs/FileStore/tables/ML_Titanic_dataset.csv"

# The applied options are for CSV files. For other file types, these will be ignored.
df_titanic = pd.read_csv(file_location)


print(df_titanic.dtypes)
# Séparation des caractéristiques (X) et de la variable cible (y)

X = df_titanic[["Pclass","SibSp","Parch","Fare"]]
#X = NBA_df[["mp"]]
y = df_titanic["Survived"]

# Division des données en ensembles d'entraînement et de test

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.2 , random_state = 0)

numerical_features = X_train.select_dtypes(include=["number"])
non_numerical_features = X_train.select_dtypes(exclude=["number"])

# Mise à l'échelle des caractéristiques

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Création d'une instance de modèle de régression linéaire

log_reg = LogisticRegression()

# Ajustement du modèle aux données d'entraînement
log_reg.fit(X_train_scaled, y_train)

# Évaluation du modèle sur les données de test
log_reg.score(X_test_scaled,y_test)
print(log_reg.score(X_test_scaled,y_test))

new_record = pd.DataFrame({"Pclass" : [1], "SibSp" : [0], "Parch" : [1], "Fare" : [65]})

# Mise à l'échelle des nouvelles données
X_new_scaled = scaler.transform(new_record)


# Prédiction des valeurs de win_rating pour les nouvelles données mises à l'échelle

print(log_reg.predict(X_new_scaled))
